using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

class Practica2
{
    static void Main(string[] args)
    {

        Centralita centralita = new Centralita("MiCentralita");

        Llamada llamada1 = new LlamadaLocal("8091111111", "8092222222", new DateTime(2023, 3, 29, 10, 30, 0), 5);
        Llamada llamada2 = new LlamadaProvincial("8093333333", "8094444444", new DateTime(2023, 3, 30, 12, 0, 0), 10, "1");
        Llamada llamada3 = new LlamadaProvincial("8095555555", "8096666666", new DateTime(2023, 3, 30, 13, 0, 0), 15, "2");
        Llamada llamada4 = new LlamadaLocal("8097777777", "8098888888", new DateTime(2023, 3, 31, 15, 0, 0), 7);

        centralita.AgregarLlamada(llamada1);
        centralita.AgregarLlamada(llamada2);
        centralita.AgregarLlamada(llamada3);
        centralita.AgregarLlamada(llamada4);

        Console.WriteLine("Informe de la central telefónica:");
        Console.WriteLine("Número total de llamadas: {0}", centralita.NumeroTotalLlamadas);
        Console.WriteLine("Facturación total: {0:C}", centralita.FacturacionTotal);
    }
}

abstract class Llamada
{
    protected string origen;
    protected string destino;
    protected DateTime fecha;
    protected int duracion;

    public Llamada(string origen, string destino, DateTime fecha, int duracion)
    {
        this.origen = origen;
        this.destino = destino;
        this.fecha = fecha;
        this.duracion = duracion;
    }

    public abstract decimal CalcularCosto();

    public override string ToString()
    {
        return String.Format("Origen: {0}, Destino: {1}, Fecha: {2}, Duración: {3}",
            origen, destino, fecha.ToString("yyyy/MM/dd hh:mm:ss"), duracion);
    }
}

class LlamadaLocal : Llamada
{
    public LlamadaLocal(string origen, string destino, DateTime fecha, int duracion)
        : base(origen, destino, fecha, duracion)
    {
    }

    public override decimal CalcularCosto()
    {
        const decimal precioPorSegundo = 0.15M;
        return duracion * precioPorSegundo;
    }
}

class LlamadaProvincial : Llamada
{
    private string franja;

    public LlamadaProvincial(string origen, string destino, DateTime fecha, int duracion, string franja)
        : base(origen, destino, fecha, duracion)
    {
        this.franja = franja;
    }

    public override decimal CalcularCosto()
    {
        decimal precioPorSegundo;

        switch (franja)
        {
            case "1":
                precioPorSegundo = 0.20M;
                break;
            case "2":
                precioPorSegundo = 0.25M;
                break;
            case "3":
                precioPorSegundo = 0.30M;
                break;
            default:
                throw new ArgumentException("La franja horaria no es válida.");
        }

        return duracion * precioPorSegundo;
    }
}

class Centralita
{
    private string nombre;
    private List<Llamada> llamadas;

    public Centralita(string nombre)
    {
        this.nombre = nombre;
        this.llamadas = new List<Llamada>();
    }

    public void AgregarLlamada(Llamada llamada)
    {
        llamadas.Add(llamada);
    }

    public int NumeroTotalLlamadas
    {
        get { return llamadas.Count; }
    }

    public decimal FacturacionTotal
    {
        get
        {
            decimal total = 0;

            foreach (Llamada llamada in llamadas)
            {
                total += llamada.CalcularCosto();
            }

            return total;
        }
    }
}

